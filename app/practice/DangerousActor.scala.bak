//: practice: DangerousActor.scala
package practice

import akka.pattern.CircuitBreaker
import akka.pattern.pipe
import akka.actor.Actor
import akka.actor.ActorLogging
import akka.event.Logging

import scala.concurrent.duration._
import scala.concurrent.Future


class DangerousActor extends Actor with ActorLogging {

  import context.dispatcher

  val breaker = new CircuitBreaker(
    context.system.scheduler,
    maxFailures  = 5,
    callTimeout  = 10.seconds,
    resetTimeout = 1.minute ).onOpen( notifyMeOpen() )


  def notifyMeOpen() : Unit = {
    log.warning( "My CircuitBreaker is now open, and will not close for one minute" )
  }

  def dangerousCall: String = "This really isn't that dangerous of a call after all"

  def receive(): Unit = {

    case "is my middle name" => breaker.withCircuitBreaker( Future(dangerousCall) ) pipeTo sender
    case "block for me"      => sender ! breaker.withSyncCircuitBreaker( dangerousCall )

  }



} //:~
